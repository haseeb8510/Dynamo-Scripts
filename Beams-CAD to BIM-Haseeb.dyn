{
  "Uuid": "15c3aa19-3286-413c-851a-08a106fd63bd",
  "IsCustomNode": false,
  "Description": "",
  "Name": "Beam Creations",
  "ElementResolver": {
    "ResolutionMap": {}
  },
  "Inputs": [
    {
      "Id": "d21d08b1590443e882fb93d62113480e",
      "Name": "Select CAD Link",
      "Type": "selection",
      "Type2": "hostSelection",
      "Value": "dbde3117-8ebd-4d71-a8f9-67b18d26aec4-001293a3",
      "Description": "Select a model element from the document.",
      "SelectedIndex": 0
    },
    {
      "Id": "241bebe0c98e4694acbdebc200812038",
      "Name": "Text Layer Name",
      "Type": "string",
      "Type2": "string",
      "Value": "DONUT",
      "Description": "Creates a string",
      "SelectedIndex": 0
    },
    {
      "Id": "dc5cc0ec9c034e17a5826033f4ea94e0",
      "Name": "Beam Centre Line Layer Name",
      "Type": "string",
      "Type2": "string",
      "Value": "Beam-CL",
      "Description": "Creates a string",
      "SelectedIndex": 0
    },
    {
      "Id": "2bec2139f15c41ea83a0a808a39a5b84",
      "Name": "Level To Place Beams",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "L2",
      "Description": "Select a level in the active document",
      "SelectedIndex": 1
    },
    {
      "Id": "5bc873cd727b4925b9d48b5c505e2107",
      "Name": "Reference Beam Type",
      "Type": "selection",
      "Type2": "dropdownSelection",
      "Value": "12 x 24",
      "Description": "Select a structural framing type in the active document",
      "SelectedIndex": 0
    }
  ],
  "Outputs": [],
  "Nodes": [
    {
      "ConcreteType": "Dynamo.Nodes.DSModelElementSelection, DSRevitNodesUI",
      "NodeType": "ExtensionNode",
      "InstanceId": [
        "dbde3117-8ebd-4d71-a8f9-67b18d26aec4-001293a3"
      ],
      "Id": "d21d08b1590443e882fb93d62113480e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "9914374eee314ae797fcfc7ff350bf79",
          "Name": "Element",
          "Description": "The selected elements.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "CAD.CurvesFromCADLayers@Revit.Elements.ImportInstance,string[],bool,string[]",
      "Id": "6dc29e2845dc47359493bc1aceb95a23",
      "Inputs": [
        {
          "Id": "13386efdc3ae4a558f8d3c3a60889499",
          "Name": "importInstance",
          "Description": "Input the ImportInstance to convert to curves.\n\nImportInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a830860985b944e7ab8e540582cab060",
          "Name": "layerNames",
          "Description": "Input the layer names for conversion. Leave unconnected to convert all layers. Names are case-sensitive.\n\nstring[]\nDefault value : []",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "08c5cae87f49434197968593b39dc04f",
          "Name": "createModelCurves",
          "Description": "Set to True to convert into Revit Model Lines.\n\nbool\nDefault value : false",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "5baf5a08309043e09dcea991be357006",
          "Name": "lineStyleMap",
          "Description": "Input the LineStyle name to map to each layer. Longest lacing is used by default.\n\nstring[]\nDefault value : []",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "35bca2a0f5854eb2836c5466f56eaaca",
          "Name": "Curve[][]",
          "Description": "Curve[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6af61442bb89460ead27cd2e07c912af",
          "Name": "layerKeys[]",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Extracts curves from a CAD link or import by layer name. Enter LineStyle names to map to each layer during conversion.\r\rThe node is optimized to convert curve types that typically fail when using Dynamo Element.Curves node or Revit Explode.\r\rVisit bimorph.com/bimorph-nodes for support.\n\nCAD.CurvesFromCADLayers (importInstance: ImportInstance, layerNames: string[] = [], createModelCurves: bool = false, lineStyleMap: string[] = []): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "CADTextData.FromLayers@Revit.Elements.ImportInstance,string[]",
      "Id": "5507ce2cf89f4d1396371de0cc3c090c",
      "Inputs": [
        {
          "Id": "bc6afee442b045ea92c700b018fae67b",
          "Name": "importInstance",
          "Description": "Input the ImportInstance to convert to curves.\n\nImportInstance",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "efe205aa19ec459c8525972dc20180bf",
          "Name": "layerNames",
          "Description": "Input the layer names to filter and convert text elements. Leave unconnected to convert text on all layers. Names are case-sensitive.\n\nstring[]\nDefault value : []",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "01d3a018a83f442192159bdca0c50c6b",
          "Name": "CADTextData[][]",
          "Description": "CADTextData[][]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a9a43c74218645658231789797ce3f14",
          "Name": "layerKeys[]",
          "Description": "string[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Extract text from a CAD link or import by layer name. Works recursively to extract text from CAD blocks regardless of any nested depth. The node also avoids exploding the CAD instance, so it is not affected by Revits 10,000 element import limit! \r\rVisit bimorph.com/bimorph-nodes for support\n\nCADTextData.FromLayers (importInstance: ImportInstance, layerNames: string[] = []): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "4afd7c2c39814d539708d8afcf34f517",
      "Inputs": [
        {
          "Id": "8ad88716713246b789303d291221aeba",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "8fa9120c42864853b47f7654f815fdba",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "36242709faa745b7b18d0c1be10543e5",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "DONUT",
      "Id": "241bebe0c98e4694acbdebc200812038",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "a48b85864aed4cdaa07d2b7513705230",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "CADTextData.TextValue",
      "Id": "ed34e2ba58dd4bcd9e2269a42176aa76",
      "Inputs": [
        {
          "Id": "3a1dfa631797453eba126380f9700522",
          "Name": "cADTextData",
          "Description": "CADTextData",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ab15f14e486e481a93cc9c3101e9f9e8",
          "Name": "string",
          "Description": "string",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The text value of this CADTextData object. \r\rVisit bimorph.com/bimorph-nodes for support\n\nCADTextData.TextValue: string"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "Beam-CL",
      "Id": "dc5cc0ec9c034e17a5826033f4ea94e0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d455f53f64c7444eaea164c36fa7b06b",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Orchid.Common.String.Split@string,string",
      "Id": "776084c1fbcd41298e172dd13d355ce9",
      "Inputs": [
        {
          "Id": "fb3676c41cbe4a7fb1e3870a8dd6cb6e",
          "Name": "string",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "54764bf952b2446bae522dc42035d026",
          "Name": "separator",
          "Description": "String that determine the end and start of a split.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "abd55f5fa1f34daf9f9312a61dd224a7",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator.\n\nString.Split (string: string, separator: string): string[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "(",
      "Id": "195c539dd19b4f30ae1b618ea4c69eb2",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "1343a389116944af8c34db29b191bc12",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "ff25440923784e3b9ed38cda9d6fc67b",
      "Inputs": [
        {
          "Id": "f33c681394b344a19e7451b3003637da",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "9abb6716fdf04135bc444261c716d241",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "dcac406889d64c4ca5800bd58eddce20",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "d101113d95e1496892ee786f2eca8628",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "8fed8b0b1bf346d0844beed69f3038db",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Orchid.Common.String.Split@string,string",
      "Id": "02b22cea6ed04cd59dedcecbb9c2e6d5",
      "Inputs": [
        {
          "Id": "fdf5c51ff2a24d6483744a1b7d6f804d",
          "Name": "string",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "f83f60eb490547f4b709235bae2e8b5e",
          "Name": "separator",
          "Description": "String that determine the end and start of a split.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ce32245c9fa84f1e971dd36b769c5ed1",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator.\n\nString.Split (string: string, separator: string): string[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": ")",
      "Id": "8028f63edf294776999dba692c598da1",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d443184f16704aae92e84ae4b89e975b",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "083dd7b348ae478b9237b91131298e51",
      "Inputs": [
        {
          "Id": "e0a0d3d972c7405b8fe6d1902bdeb645",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "0994a726fa4f49eba4cfe614779cf134",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "667742d6426e407cb200cb955b1eb9cc",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "c10b5a9203714244996b7d922b58cac0",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "4342734b37d04a6cb3dee45ea5e34a11",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Orchid.Common.String.Split@string,string",
      "Id": "e5da57e8fca54aaa92991ffdbe992694",
      "Inputs": [
        {
          "Id": "c19c97ff8f90497b999bdcb114b584e0",
          "Name": "string",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "44e77ef6730e4171af03dfdbcfb1c34b",
          "Name": "separator",
          "Description": "String that determine the end and start of a split.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "048c4a282405409cb032cb45bbb98145",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator.\n\nString.Split (string: string, separator: string): string[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "\"",
      "Id": "5302febeba974ce3868a72689296a80e",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "95ebbaa1dc864fcb9d2ae37c6608c032",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "5f9e04b395b24f76880f1ffe07a57620",
      "Inputs": [
        {
          "Id": "78c8f4c64d8143e685b01f8c6c9f2b1b",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "15cfa42c141d4abfa510d93e0200b1bb",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f417ad7f46184a82a61fd393556ff865",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "a1d710d738b942a5a1ac33996769beb9",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "fe5cad1bea2841a9b3c557a0beec28a4",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "2dfe96b41644459e95f1d88da25ac7dc",
      "Inputs": [
        {
          "Id": "7fc44fca23fe48df86c51870eabd0641",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "10da6c0dc5ab40258313e2a03da97eed",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "cdb711fb6a3e40ab9b51701c82c24336",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "1;",
      "Id": "ab4ea7ab50544717a78ce620e6cc5425",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "6f0a30b4be2e486d8c2e7c1dcb9eb4c5",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Orchid.Common.String.Split@string,string",
      "Id": "d6429fa4e8a646c5b4281a3f403d8249",
      "Inputs": [
        {
          "Id": "c0f1685a0db04bcc9aaf182dfea4bfbb",
          "Name": "string",
          "Description": "String to split up.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "2a12d4475d5a44c8b623fafa314d7efc",
          "Name": "separator",
          "Description": "String that determine the end and start of a split.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "f316260ade5046fc8206d881c553a244",
          "Name": "strings",
          "Description": "List of strings made from the input string.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Divides a single string into a list of strings, with divisions determined by the given separator.\n\nString.Split (string: string, separator: string): string[]"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "x",
      "Id": "ca3c6d6397bc4f60a780476efa36a0a7",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "f645920861ee4ba58c7c6e008686424d",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.GetItemAtIndex@var[]..[],int",
      "Id": "4ce2aaf1e4ee4b37b0e24b6a7ca75246",
      "Inputs": [
        {
          "Id": "ef8fecf8e05349018b4ba5e205be3630",
          "Name": "list",
          "Description": "List to fetch an item from.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": true,
          "KeepListStructure": false
        },
        {
          "Id": "29f3d1fa2c9647d5bc8c7187b83e970f",
          "Name": "index",
          "Description": "Index of the item to be fetched.\n\nint",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a86050c4d4734d2ab6ed34aefc723039",
          "Name": "item",
          "Description": "Item in the list at the given index.",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Returns an item from the given list that's located at the specified index.\n\nList.GetItemAtIndex (list: var[]..[], index: int): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "0;",
      "Id": "212a8ecf95bb496bad41153eb1221f5c",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d096f003700b42f1bc37b15ad9f5e228",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "64123a8590874c2084987a9848a5cee4",
      "Inputs": [
        {
          "Id": "a011ec9921244b378ff2a42e551f5de0",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "ad835d9f804e4824b8730a091341ddf0",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.String.ToNumber@string",
      "Id": "8fc19958fb1b428480ae37b8bdcb54cd",
      "Inputs": [
        {
          "Id": "80a20210a454456790746cbffffca52c",
          "Name": "string",
          "Description": "String to be converted\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8b975ba8c4054f238313808d5b93d687",
          "Name": "number",
          "Description": "Integer or double-type number",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Converts a string to an integer or a double.\n\nString.ToNumber (string: string): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x/12;",
      "Id": "6217bbcc915b41f4914fb45ea69aa2e8",
      "Inputs": [
        {
          "Id": "b0a8485595fa4032abc5f0260b69f243",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "a447fcb6b35540cda3b4f508f6fea61f",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CodeBlockNodeModel, DynamoCore",
      "NodeType": "CodeBlockNode",
      "Code": "x/12;",
      "Id": "743016e8f7a5493bb8460ca653d25e98",
      "Inputs": [
        {
          "Id": "4d8ada6efc4e462ca866c8e08dd5604a",
          "Name": "x",
          "Description": "x",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3e8d82912c3c46128f8614c91b6b3ae2",
          "Name": "",
          "Description": "Value of expression at line 1",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Allows for DesignScript code to be authored directly"
    },
    {
      "ConcreteType": "DSRevitNodesUI.Levels, DSRevitNodesUI",
      "SelectedIndex": 1,
      "SelectedString": "L2",
      "NodeType": "ExtensionNode",
      "Id": "2bec2139f15c41ea83a0a808a39a5b84",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d4d42fbb5a9d4783b9df63f3e88ae18c",
          "Name": "Levels",
          "Description": "The selected Levels",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a level in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "177dfd6d-a525-4f59-96a6-811533393b39",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "3822dafd41cb472b8f23c4b793f428da",
      "Inputs": [
        {
          "Id": "77b03f14df0046518190062e1d69b780",
          "Name": "element",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "9fa131f4fa9742df835a2dc981d79882",
          "Name": "name",
          "Description": "var",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "9c966d2bb3d540249774677ce41e3c28",
          "Name": "element",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Duplicates the given element (view, element type)."
    },
    {
      "ConcreteType": "DSRevitNodesUI.StructuralFramingTypes, DSRevitNodesUI",
      "SelectedIndex": 0,
      "SelectedString": "12 x 24",
      "NodeType": "ExtensionNode",
      "Id": "5bc873cd727b4925b9d48b5c505e2107",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d604f2695efa44d299ab7ed8d8beb171",
          "Name": "Framing Types",
          "Description": "The selected Framing Types",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Select a structural framing type in the active document"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.StructuralFraming.BeamByCurve@Autodesk.DesignScript.Geometry.Curve,Revit.Elements.Level,Revit.Elements.FamilyType",
      "Id": "87f85152e0ac4ceaadb6f4a753dbb01b",
      "Inputs": [
        {
          "Id": "22a6ed70b0ed40349ac4215074319e26",
          "Name": "curve",
          "Description": "The curve which defines the center line of the beam.\n\nCurve",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3afeb2c5e4fd401182f8e71eba7bae80",
          "Name": "level",
          "Description": "The level with which you'd like the beam to be associated.\n\nLevel",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "aa4a423139a14db4a525aec84f09eaf3",
          "Name": "structuralFramingType",
          "Description": "The structural framing type representing the beam.\n\nFamilyType",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d41421ec9ded40ce980c9021136f626b",
          "Name": "StructuralFraming",
          "Description": "StructuralFraming",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Create a beam.\n\nStructuralFraming.BeamByCurve (curve: Curve, level: Level, structuralFramingType: FamilyType): StructuralFraming"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "eb3a947c27ed47809b980d744e513ae1",
      "Inputs": [
        {
          "Id": "da606a1ce6604dd0b3b452277402f586",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "acef68804fd34768b5103a13ff254c41",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "6b2c0bfbd73d418484ef4aa728f8a066",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "b8c7ef51fc9844bb88551c21b17e8b96",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Revit.Elements.Element.SetParameterByName@string,var",
      "Id": "94a1503068ca4f16b7221e61b312889e",
      "Inputs": [
        {
          "Id": "664c66a0d282484faee32aabf59134df",
          "Name": "element",
          "Description": "Revit.Elements.Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "e6ac2cbca3b64e64aea3d7d5eba51910",
          "Name": "parameterName",
          "Description": "The name of the parameter to set.\n\nstring",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "513380fb1ab34b77a219a951a7f10fa2",
          "Name": "value",
          "Description": "The value.\n\nvar",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "eb618df2295f4c2a8dc441b89483f369",
          "Name": "Element",
          "Description": "Element",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Set one of the element's parameters.\n\nElement.SetParameterByName (parameterName: string, value: var): Element"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "b",
      "Id": "cf94fee3679d48059307fd2dc02fe670",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "d7e5620486e04c9d956306634c9ae7ea",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "CoreNodeModels.Input.StringInput, CoreNodeModels",
      "NodeType": "StringInputNode",
      "InputValue": "h",
      "Id": "eb9d30dc338c4d7d82eecb81985d28fa",
      "Inputs": [],
      "Outputs": [
        {
          "Id": "2fa4dd58e7844fbd9833b8fda28fe595",
          "Name": "",
          "Description": "String",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Disabled",
      "Description": "Creates a string"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "CADTextData.OriginPoint",
      "Id": "37a95f36189d42acb45cbeebba7998b8",
      "Inputs": [
        {
          "Id": "c447f6f7d81d432ebcbb4f72ce5ad1fd",
          "Name": "cADTextData",
          "Description": "CADTextData",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "767ee9655b3941148de494d148b991fb",
          "Name": "Point",
          "Description": "Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "The placement point of this CADTextData object.\r\r Visit bimorph.com/bimorph-nodes for support\n\nCADTextData.OriginPoint: Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "b2272d9c2496451194817f0cd389633c",
      "Inputs": [
        {
          "Id": "8bb5750f29154642aa7383f795174e12",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "d7b665daf12a4b25b8613eccd1b290c6",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "d649e735426e421894c34b227693dd8d",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.X",
      "Id": "08a9c87f0ca645588a5216592ef2a4f2",
      "Inputs": [
        {
          "Id": "9d779baf7957479b919215a01ff584ce",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "af13b92b62784d79a32798325f6217a1",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the X component of a Point\n\nPoint.X: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Z",
      "Id": "89bfe7a9ccb3468ba8cbf143ca060d89",
      "Inputs": [
        {
          "Id": "ed58b03ce0e149e8b473a6385232d7a0",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "3b26fb9dbf4d4f01adda9c35d122e09d",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Z component of a Point\n\nPoint.Z: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.Y",
      "Id": "43c89f75f9424f0dbe8dd1b133db3f23",
      "Inputs": [
        {
          "Id": "2934892d595f4132ba897edee703dabd",
          "Name": "point",
          "Description": "Autodesk.DesignScript.Geometry.Point",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "72eb401782a1413884c40e7d800a072d",
          "Name": "double",
          "Description": "double",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Get the Y component of a Point\n\nPoint.Y: double"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "Autodesk.DesignScript.Geometry.Point.ByCoordinates@double,double,double",
      "Id": "a54e870dedd84194bb28309857371b4c",
      "Inputs": [
        {
          "Id": "7fb71b63483543aba922df2f6e14c9ca",
          "Name": "x",
          "Description": "X coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "08fdde866311425891855a69b193d372",
          "Name": "y",
          "Description": "Y coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "3a652431cbfe4c4a82d28b49efdf8207",
          "Name": "z",
          "Description": "Z coordinate\n\ndouble\nDefault value : 0",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8ec1a85287984d0f96eb1ad1aa3315a0",
          "Name": "Point",
          "Description": "Point created by coordinates",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Form a Point given 3 cartesian coordinates\n\nPoint.ByCoordinates (x: double = 0, y: double = 0, z: double = 0): Point"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.ZeroTouch.DSFunction, DynamoCore",
      "NodeType": "FunctionNode",
      "FunctionSignature": "DSCore.List.Flatten@var[]..[],int",
      "Id": "0eb8264c53ec4ff98ca7140a43182dac",
      "Inputs": [
        {
          "Id": "3aa29c6da1c84c81a94b5dde5e270794",
          "Name": "list",
          "Description": "List to flatten.\n\nvar[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "0f69bd84ac7849a2af937262028d2ed4",
          "Name": "amount",
          "Description": "Layers of list nesting to remove (-1 will remove all list nestings)\n\nint\nDefault value : -1",
          "UsingDefaultValue": true,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "8043f59cf9e446968d3d0a9f6f9f0643",
          "Name": "list",
          "Description": "Flattened list by amount",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": "Flattens a nested list of lists by a certain amount.\n\nList.Flatten (list: var[]..[], amount: int = -1): var[]..[]"
    },
    {
      "ConcreteType": "Dynamo.Graph.Nodes.CustomNodes.Function, DynamoCore",
      "FunctionSignature": "3f25f9e6-c2c8-4463-8d3c-ad5f066a4f2c",
      "FunctionType": "Graph",
      "NodeType": "FunctionNode",
      "Id": "9a5d0e580d414a939804881ab08121b1",
      "Inputs": [
        {
          "Id": "ac02397b1f0d45029280357c8e93a910",
          "Name": "Geometrys",
          "Description": "Geometry[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "a18dd99604a84c7f97557c62036988b0",
          "Name": "Others_Geometrys",
          "Description": "Geometry[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        },
        {
          "Id": "c30a3ad5c9104be39ecb4ec0f514516d",
          "Name": "objects",
          "Description": "var[]..[]",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Outputs": [
        {
          "Id": "e4000a70dd27453e96e14e1f3d52c1f5",
          "Name": "Nearest objects",
          "Description": "return value",
          "UsingDefaultValue": false,
          "Level": 2,
          "UseLevels": false,
          "KeepListStructure": false
        }
      ],
      "Replication": "Auto",
      "Description": ""
    }
  ],
  "Connectors": [
    {
      "Start": "9914374eee314ae797fcfc7ff350bf79",
      "End": "13386efdc3ae4a558f8d3c3a60889499",
      "Id": "a0911af574de4afa967ea569d4557246",
      "IsHidden": "False"
    },
    {
      "Start": "9914374eee314ae797fcfc7ff350bf79",
      "End": "bc6afee442b045ea92c700b018fae67b",
      "Id": "8fd913e4eec246e9895b152d3c135760",
      "IsHidden": "False"
    },
    {
      "Start": "35bca2a0f5854eb2836c5466f56eaaca",
      "End": "8bb5750f29154642aa7383f795174e12",
      "Id": "ba93770cb64548c0a2033915ebd7e1f9",
      "IsHidden": "False"
    },
    {
      "Start": "01d3a018a83f442192159bdca0c50c6b",
      "End": "3a1dfa631797453eba126380f9700522",
      "Id": "efd92ffc2ab84cbbbba759899129e035",
      "IsHidden": "False"
    },
    {
      "Start": "01d3a018a83f442192159bdca0c50c6b",
      "End": "c447f6f7d81d432ebcbb4f72ce5ad1fd",
      "Id": "3e6e774cf6f64aae9348053926b581fb",
      "IsHidden": "False"
    },
    {
      "Start": "36242709faa745b7b18d0c1be10543e5",
      "End": "c30a3ad5c9104be39ecb4ec0f514516d",
      "Id": "29cc060e4b1b4331b7d0a03f8c5bff83",
      "IsHidden": "False"
    },
    {
      "Start": "a48b85864aed4cdaa07d2b7513705230",
      "End": "efe205aa19ec459c8525972dc20180bf",
      "Id": "4c762f0b4ad04ca08458a95d38d05bb9",
      "IsHidden": "False"
    },
    {
      "Start": "ab15f14e486e481a93cc9c3101e9f9e8",
      "End": "8ad88716713246b789303d291221aeba",
      "Id": "1a8d56be80c3498b84ee4e41dfd4479e",
      "IsHidden": "False"
    },
    {
      "Start": "d455f53f64c7444eaea164c36fa7b06b",
      "End": "a830860985b944e7ab8e540582cab060",
      "Id": "ecc7313f31a0428ba84bc913aa6fe2bc",
      "IsHidden": "False"
    },
    {
      "Start": "abd55f5fa1f34daf9f9312a61dd224a7",
      "End": "f33c681394b344a19e7451b3003637da",
      "Id": "260fecc3755a4c5a8cd99e023be380f7",
      "IsHidden": "False"
    },
    {
      "Start": "1343a389116944af8c34db29b191bc12",
      "End": "54764bf952b2446bae522dc42035d026",
      "Id": "1a834edf386e493d8524a29f6c1db5d4",
      "IsHidden": "False"
    },
    {
      "Start": "dcac406889d64c4ca5800bd58eddce20",
      "End": "fdf5c51ff2a24d6483744a1b7d6f804d",
      "Id": "74706c3d099246c1a712e549f7cb933f",
      "IsHidden": "False"
    },
    {
      "Start": "8fed8b0b1bf346d0844beed69f3038db",
      "End": "9abb6716fdf04135bc444261c716d241",
      "Id": "5363aeea685544068ebd7a6d25400d49",
      "IsHidden": "False"
    },
    {
      "Start": "ce32245c9fa84f1e971dd36b769c5ed1",
      "End": "e0a0d3d972c7405b8fe6d1902bdeb645",
      "Id": "bc1c6d19c9ca4483ba9e265e3f8372e6",
      "IsHidden": "False"
    },
    {
      "Start": "d443184f16704aae92e84ae4b89e975b",
      "End": "f83f60eb490547f4b709235bae2e8b5e",
      "Id": "4d0d5355e01e4c5cabd306b01e02771e",
      "IsHidden": "False"
    },
    {
      "Start": "667742d6426e407cb200cb955b1eb9cc",
      "End": "c19c97ff8f90497b999bdcb114b584e0",
      "Id": "62d46806e8d54f7db9c87d8d8fa34c1a",
      "IsHidden": "False"
    },
    {
      "Start": "4342734b37d04a6cb3dee45ea5e34a11",
      "End": "0994a726fa4f49eba4cfe614779cf134",
      "Id": "5e2eca0ac03846b1982bc2f970ca8292",
      "IsHidden": "False"
    },
    {
      "Start": "048c4a282405409cb032cb45bbb98145",
      "End": "78c8f4c64d8143e685b01f8c6c9f2b1b",
      "Id": "0141c9f45b6644c89b984f46c07c07a0",
      "IsHidden": "False"
    },
    {
      "Start": "048c4a282405409cb032cb45bbb98145",
      "End": "7fc44fca23fe48df86c51870eabd0641",
      "Id": "6f3ab21314834c56b75ae9fc55ac5812",
      "IsHidden": "False"
    },
    {
      "Start": "95ebbaa1dc864fcb9d2ae37c6608c032",
      "End": "44e77ef6730e4171af03dfdbcfb1c34b",
      "Id": "1ec0ca4682804b90a7f4e820e957a00f",
      "IsHidden": "False"
    },
    {
      "Start": "f417ad7f46184a82a61fd393556ff865",
      "End": "a011ec9921244b378ff2a42e551f5de0",
      "Id": "753c760988ca491aa1037c7b65d3a2d6",
      "IsHidden": "False"
    },
    {
      "Start": "fe5cad1bea2841a9b3c557a0beec28a4",
      "End": "15cfa42c141d4abfa510d93e0200b1bb",
      "Id": "ebdbcba5a1a545ce91d20d59cc727851",
      "IsHidden": "False"
    },
    {
      "Start": "cdb711fb6a3e40ab9b51701c82c24336",
      "End": "c0f1685a0db04bcc9aaf182dfea4bfbb",
      "Id": "24a6331413e943468309dcd84aac11ef",
      "IsHidden": "False"
    },
    {
      "Start": "6f0a30b4be2e486d8c2e7c1dcb9eb4c5",
      "End": "10da6c0dc5ab40258313e2a03da97eed",
      "Id": "43e1d86309504bc1b7d44820e9b0caa3",
      "IsHidden": "False"
    },
    {
      "Start": "f316260ade5046fc8206d881c553a244",
      "End": "ef8fecf8e05349018b4ba5e205be3630",
      "Id": "4bc24d4f576a441994d9c4de90d731cf",
      "IsHidden": "False"
    },
    {
      "Start": "f645920861ee4ba58c7c6e008686424d",
      "End": "2a12d4475d5a44c8b623fafa314d7efc",
      "Id": "f0d9f83ae13d4d57b4ae6c10c62b9f69",
      "IsHidden": "False"
    },
    {
      "Start": "a86050c4d4734d2ab6ed34aefc723039",
      "End": "80a20210a454456790746cbffffca52c",
      "Id": "427265b6a35f411da2ad69b833a70105",
      "IsHidden": "False"
    },
    {
      "Start": "d096f003700b42f1bc37b15ad9f5e228",
      "End": "29f3d1fa2c9647d5bc8c7187b83e970f",
      "Id": "95d605f058004f9daf9f0c51ed4b2c98",
      "IsHidden": "False"
    },
    {
      "Start": "ad835d9f804e4824b8730a091341ddf0",
      "End": "b0a8485595fa4032abc5f0260b69f243",
      "Id": "5def47787ead44e78c544e3f473ef884",
      "IsHidden": "False"
    },
    {
      "Start": "8b975ba8c4054f238313808d5b93d687",
      "End": "4d8ada6efc4e462ca866c8e08dd5604a",
      "Id": "b171ec2bcceb499bbca54271c50f8724",
      "IsHidden": "False"
    },
    {
      "Start": "a447fcb6b35540cda3b4f508f6fea61f",
      "End": "6b2c0bfbd73d418484ef4aa728f8a066",
      "Id": "763aabe92fda4b1cbdfa5b47e1eaf33e",
      "IsHidden": "False"
    },
    {
      "Start": "3e8d82912c3c46128f8614c91b6b3ae2",
      "End": "513380fb1ab34b77a219a951a7f10fa2",
      "Id": "84ba8a08700f4e77a3e972cf11b196ef",
      "IsHidden": "False"
    },
    {
      "Start": "d4d42fbb5a9d4783b9df63f3e88ae18c",
      "End": "3afeb2c5e4fd401182f8e71eba7bae80",
      "Id": "e5b1913dede14712b1130ca7a6481435",
      "IsHidden": "False"
    },
    {
      "Start": "9c966d2bb3d540249774677ce41e3c28",
      "End": "da606a1ce6604dd0b3b452277402f586",
      "Id": "bba0f74bbfa24043b19edb0c752562f8",
      "IsHidden": "False"
    },
    {
      "Start": "d604f2695efa44d299ab7ed8d8beb171",
      "End": "77b03f14df0046518190062e1d69b780",
      "Id": "cc61b68577744f5aa81536620b0a7c9f",
      "IsHidden": "False"
    },
    {
      "Start": "b8c7ef51fc9844bb88551c21b17e8b96",
      "End": "664c66a0d282484faee32aabf59134df",
      "Id": "03f46f27509c4c84bb8b5c637a56c075",
      "IsHidden": "False"
    },
    {
      "Start": "eb618df2295f4c2a8dc441b89483f369",
      "End": "aa4a423139a14db4a525aec84f09eaf3",
      "Id": "34f2610196524618b34d76f2c282bdc0",
      "IsHidden": "False"
    },
    {
      "Start": "d7e5620486e04c9d956306634c9ae7ea",
      "End": "acef68804fd34768b5103a13ff254c41",
      "Id": "56e1573343fa4369a9f802029c21224e",
      "IsHidden": "False"
    },
    {
      "Start": "2fa4dd58e7844fbd9833b8fda28fe595",
      "End": "e6ac2cbca3b64e64aea3d7d5eba51910",
      "Id": "cc808c779fe94487a33e4d18fc1a2219",
      "IsHidden": "False"
    },
    {
      "Start": "767ee9655b3941148de494d148b991fb",
      "End": "9d779baf7957479b919215a01ff584ce",
      "Id": "194c7734bcb1437ba58ed4f0887f07b9",
      "IsHidden": "False"
    },
    {
      "Start": "767ee9655b3941148de494d148b991fb",
      "End": "ed58b03ce0e149e8b473a6385232d7a0",
      "Id": "34a793d2beb64d3d8adbd7305bb0b1ba",
      "IsHidden": "False"
    },
    {
      "Start": "767ee9655b3941148de494d148b991fb",
      "End": "2934892d595f4132ba897edee703dabd",
      "Id": "c0b02a2fd6f74945967f0ae755148494",
      "IsHidden": "False"
    },
    {
      "Start": "d649e735426e421894c34b227693dd8d",
      "End": "ac02397b1f0d45029280357c8e93a910",
      "Id": "f0da9258c9f147508033ab6f476a3425",
      "IsHidden": "False"
    },
    {
      "Start": "d649e735426e421894c34b227693dd8d",
      "End": "22a6ed70b0ed40349ac4215074319e26",
      "Id": "95194f57df3a4071a5f48d662d8edeb9",
      "IsHidden": "False"
    },
    {
      "Start": "af13b92b62784d79a32798325f6217a1",
      "End": "7fb71b63483543aba922df2f6e14c9ca",
      "Id": "1f46920396214c0e827fa98cd52f998f",
      "IsHidden": "False"
    },
    {
      "Start": "3b26fb9dbf4d4f01adda9c35d122e09d",
      "End": "3a652431cbfe4c4a82d28b49efdf8207",
      "Id": "0d8079eb9046431f8b1f914464ec9936",
      "IsHidden": "False"
    },
    {
      "Start": "72eb401782a1413884c40e7d800a072d",
      "End": "08fdde866311425891855a69b193d372",
      "Id": "664590850d3d431abb1d2e90cd2f000f",
      "IsHidden": "False"
    },
    {
      "Start": "8ec1a85287984d0f96eb1ad1aa3315a0",
      "End": "3aa29c6da1c84c81a94b5dde5e270794",
      "Id": "5825810198b440b89875f325e4c8abc6",
      "IsHidden": "False"
    },
    {
      "Start": "8043f59cf9e446968d3d0a9f6f9f0643",
      "End": "a18dd99604a84c7f97557c62036988b0",
      "Id": "ead1703fa5034b73a37a45c20fe36d0b",
      "IsHidden": "False"
    },
    {
      "Start": "e4000a70dd27453e96e14e1f3d52c1f5",
      "End": "9fa131f4fa9742df835a2dc981d79882",
      "Id": "c985a1cb60a543efa66d73ca37179552",
      "IsHidden": "False"
    },
    {
      "Start": "e4000a70dd27453e96e14e1f3d52c1f5",
      "End": "fb3676c41cbe4a7fb1e3870a8dd6cb6e",
      "Id": "4af18e9fca1742bbb22c67dfde80c164",
      "IsHidden": "False"
    }
  ],
  "Dependencies": [
    "177dfd6d-a525-4f59-96a6-811533393b39",
    "3f25f9e6-c2c8-4463-8d3c-ad5f066a4f2c"
  ],
  "NodeLibraryDependencies": [
    {
      "Name": "bimorphNodes",
      "Version": "5.0.0",
      "ReferenceType": "Package",
      "Nodes": [
        "6dc29e2845dc47359493bc1aceb95a23",
        "5507ce2cf89f4d1396371de0cc3c090c",
        "ed34e2ba58dd4bcd9e2269a42176aa76",
        "37a95f36189d42acb45cbeebba7998b8"
      ]
    },
    {
      "Name": "Orchid",
      "Version": "216.3.0.5945",
      "ReferenceType": "Package",
      "Nodes": [
        "776084c1fbcd41298e172dd13d355ce9",
        "02b22cea6ed04cd59dedcecbb9c2e6d5",
        "e5da57e8fca54aaa92991ffdbe992694",
        "d6429fa4e8a646c5b4281a3f403d8249"
      ]
    },
    {
      "Name": "Genius Loci",
      "Version": "2023.7.13",
      "ReferenceType": "Package",
      "Nodes": [
        "3822dafd41cb472b8f23c4b793f428da"
      ]
    },
    {
      "Name": "KYSUDO.com",
      "Version": "21.0.8",
      "ReferenceType": "Package",
      "Nodes": [
        "9a5d0e580d414a939804881ab08121b1"
      ]
    }
  ],
  "Thumbnail": "",
  "GraphDocumentationURL": null,
  "ExtensionWorkspaceData": [
    {
      "ExtensionGuid": "28992e1d-abb9-417f-8b1b-05e053bee670",
      "Name": "Properties",
      "Version": "2.17",
      "Data": {}
    },
    {
      "ExtensionGuid": "DFBD9CC0-DB40-457A-939E-8C8555555A9D",
      "Name": "Generative Design",
      "Version": "4.0",
      "Data": {}
    }
  ],
  "Author": "",
  "Linting": {
    "activeLinter": "None",
    "activeLinterId": "7b75fb44-43fd-4631-a878-29f4d5d8399a",
    "warningCount": 0,
    "errorCount": 0
  },
  "Bindings": [
    {
      "NodeId": "87f85152-e0ac-4cea-adb6-f4a753dbb01b",
      "Binding": {
        "BeamByCurve_InClassDecl-1_InFunctionScope-1_Instance0_87f85152-e0ac-4cea-adb6-f4a753dbb01b": ""
      }
    }
  ],
  "View": {
    "Dynamo": {
      "ScaleFactor": 1.0,
      "HasRunWithoutCrash": true,
      "IsVisibleInDynamoLibrary": true,
      "Version": "2.17.0.3472",
      "RunType": "Manual",
      "RunPeriod": "1000"
    },
    "Camera": {
      "Name": "_Background Preview",
      "EyeX": -1919.5413818359375,
      "EyeY": 50.946590423583984,
      "EyeZ": -366.19717407226563,
      "LookX": 1.1849365234375,
      "LookY": -57.913631439208984,
      "LookZ": -5.03594970703125,
      "UpX": -0.0052369260229170322,
      "UpY": 0.28903108835220337,
      "UpZ": -0.95730531215667725
    },
    "ConnectorPins": [],
    "NodeViews": [
      {
        "Id": "d21d08b1590443e882fb93d62113480e",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Select CAD Link",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 116.99230228098591,
        "Y": 292.55925850000528
      },
      {
        "Id": "6dc29e2845dc47359493bc1aceb95a23",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "CAD.CurvesFromCADLayers",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 791.32825861461231,
        "Y": 881.93292964315367
      },
      {
        "Id": "5507ce2cf89f4d1396371de0cc3c090c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "CADTextData.FromLayers",
        "ShowGeometry": false,
        "Excluded": false,
        "X": 490.97861836849313,
        "Y": 302.84787171235826
      },
      {
        "Id": "4afd7c2c39814d539708d8afcf34f517",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1759.5543073943577,
        "Y": 149.76400756006146
      },
      {
        "Id": "241bebe0c98e4694acbdebc200812038",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Text Layer Name",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 120.33150929052476,
        "Y": 441.4672543498412
      },
      {
        "Id": "ed34e2ba58dd4bcd9e2269a42176aa76",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "CADTextData.TextValue",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 867.40270827393044,
        "Y": 247.70120854723541
      },
      {
        "Id": "dc5cc0ec9c034e17a5826033f4ea94e0",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Beam Centre Line Layer Name",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 122.13924029215059,
        "Y": 573.43161746853411
      },
      {
        "Id": "776084c1fbcd41298e172dd13d355ce9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.Split",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3076.8244289804147,
        "Y": 248.53464299998143
      },
      {
        "Id": "195c539dd19b4f30ae1b618ea4c69eb2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2905.2037342196941,
        "Y": 389.69452180750147
      },
      {
        "Id": "ff25440923784e3b9ed38cda9d6fc67b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3565.4559695847943,
        "Y": 223.12933084526841
      },
      {
        "Id": "d101113d95e1496892ee786f2eca8628",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3366.2904345596658,
        "Y": 317.39831176371865
      },
      {
        "Id": "02b22cea6ed04cd59dedcecbb9c2e6d5",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.Split",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3983.7944759609986,
        "Y": 214.29875567313545
      },
      {
        "Id": "8028f63edf294776999dba692c598da1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 3812.173781200278,
        "Y": 355.45863448065541
      },
      {
        "Id": "083dd7b348ae478b9237b91131298e51",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4435.3288324225778,
        "Y": 217.79752682607332
      },
      {
        "Id": "c10b5a9203714244996b7d922b58cac0",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4236.1632973974483,
        "Y": 312.06650774452334
      },
      {
        "Id": "e5da57e8fca54aaa92991ffdbe992694",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.Split",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4882.3438221636279,
        "Y": 213.40199983860194
      },
      {
        "Id": "5302febeba974ce3868a72689296a80e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 4710.7231274029073,
        "Y": 354.56187864612195
      },
      {
        "Id": "5f9e04b395b24f76880f1ffe07a57620",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6019.0258801472391,
        "Y": -106.98105609640021
      },
      {
        "Id": "a1d710d738b942a5a1ac33996769beb9",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5790.1781500215438,
        "Y": 66.60773519143396
      },
      {
        "Id": "2dfe96b41644459e95f1d88da25ac7dc",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5416.518348879943,
        "Y": 251.71011157136212
      },
      {
        "Id": "ab4ea7ab50544717a78ce620e6cc5425",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5183.4509414001641,
        "Y": 387.29699954391367
      },
      {
        "Id": "d6429fa4e8a646c5b4281a3f403d8249",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.Split",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5853.00565929201,
        "Y": 270.82705991888326
      },
      {
        "Id": "ca3c6d6397bc4f60a780476efa36a0a7",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5682.1360942620249,
        "Y": 365.41689542083259
      },
      {
        "Id": "4ce2aaf1e4ee4b37b0e24b6a7ca75246",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.GetItemAtIndex",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6305.6365348470554,
        "Y": 263.8826441377596
      },
      {
        "Id": "212a8ecf95bb496bad41153eb1221f5c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6106.4709998219259,
        "Y": 358.15162505620958
      },
      {
        "Id": "64123a8590874c2084987a9848a5cee4",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6378.42160792002,
        "Y": -182.86107690149072
      },
      {
        "Id": "8fc19958fb1b428480ae37b8bdcb54cd",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String.ToNumber",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6637.5358453180452,
        "Y": 272.87784511811827
      },
      {
        "Id": "6217bbcc915b41f4914fb45ea69aa2e8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6669.494634722314,
        "Y": -57.117881183731811
      },
      {
        "Id": "743016e8f7a5493bb8460ca653d25e98",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Code Block",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6901.6635657127317,
        "Y": 111.73885473965936
      },
      {
        "Id": "2bec2139f15c41ea83a0a808a39a5b84",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Level To Place Beams",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 124.79608182389848,
        "Y": 741.94658843677973
      },
      {
        "Id": "3822dafd41cb472b8f23c4b793f428da",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element Duplicate",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5702.55367577163,
        "Y": 1208.7409643888286
      },
      {
        "Id": "5bc873cd727b4925b9d48b5c505e2107",
        "IsSetAsInput": true,
        "IsSetAsOutput": false,
        "Name": "Reference Beam Type",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 125.857968059211,
        "Y": 922.713588461547
      },
      {
        "Id": "87f85152e0ac4ceaadb6f4a753dbb01b",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "StructuralFraming.BeamByCurve",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7726.4051726283205,
        "Y": 742.0321725179607
      },
      {
        "Id": "eb3a947c27ed47809b980d744e513ae1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.SetParameterByName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6744.8300332161407,
        "Y": 1427.0159394227851
      },
      {
        "Id": "94a1503068ca4f16b7221e61b312889e",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Element.SetParameterByName",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 7085.02873569957,
        "Y": 1426.2756899533954
      },
      {
        "Id": "cf94fee3679d48059307fd2dc02fe670",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 5998.3767673268767,
        "Y": 1495.8324571427727
      },
      {
        "Id": "eb9d30dc338c4d7d82eecb81985d28fa",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "String",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 6193.9682899963309,
        "Y": 1664.8107972582443
      },
      {
        "Id": "37a95f36189d42acb45cbeebba7998b8",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "CADTextData.OriginPoint",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 859.40370504850853,
        "Y": 398.35615664430793
      },
      {
        "Id": "b2272d9c2496451194817f0cd389633c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1847.3237910240871,
        "Y": 875.66973485150208
      },
      {
        "Id": "08a9c87f0ca645588a5216592ef2a4f2",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.X",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1201.6119435101671,
        "Y": 337.13181136413147
      },
      {
        "Id": "89bfe7a9ccb3468ba8cbf143ca060d89",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Z",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1199.953714840937,
        "Y": 592.90980822669144
      },
      {
        "Id": "43c89f75f9424f0dbe8dd1b133db3f23",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.Y",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1206.0588391572269,
        "Y": 463.9394076435035
      },
      {
        "Id": "a54e870dedd84194bb28309857371b4c",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Point.ByCoordinates",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1493.4678988588191,
        "Y": 423.79072012899206
      },
      {
        "Id": "0eb8264c53ec4ff98ca7140a43182dac",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "List.Flatten",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 1757.0579354253582,
        "Y": 424.32626351047264
      },
      {
        "Id": "9a5d0e580d414a939804881ab08121b1",
        "IsSetAsInput": false,
        "IsSetAsOutput": false,
        "Name": "Nearest_Object",
        "ShowGeometry": true,
        "Excluded": false,
        "X": 2372.1431472657168,
        "Y": 576.586543380411
      }
    ],
    "Annotations": [],
    "X": 90.896013157972362,
    "Y": 219.42896630393238,
    "Zoom": 0.46500532903371811
  }
}